<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/assets/data/atom.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-11-06T21:16:02+01:00</updated><id>/</id><title type="html">J1 Server</title><subtitle>Create Your Web</subtitle><author><name>username</name><email>username@email.domain</email></author><entry><title type="html">Welcome to J1 Template</title><link href="/posts/featured/2017/11/06/welcome-to-j1-template/" rel="alternate" type="text/html" title="Welcome to J1 Template" /><published>2017-11-06T21:15:06+01:00</published><updated>2017-11-06T21:15:06+01:00</updated><id>/posts/featured/2017/11/06/welcome-to-j1-template</id><content type="html" xml:base="/posts/featured/2017/11/06/welcome-to-j1-template/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome to Jekyll and J1 Template!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You’ll find this post in &lt;strong&gt;posts&lt;/strong&gt; directory under /post/starter/_posts.
Go ahead and edit it and  re-build the site to see your changes. You
can rebuild the site in many different ways, but the most common way
is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates
your site when a file is updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;excerpt__end&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;readmore&quot;&gt;Add new posts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock mb-5&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/featured/img12.jpg&quot; alt=&quot;Welcome to J1 Template&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Create Your Blog&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;posts\starter\_posts&lt;/code&gt; directory
that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the
necessary front matter. Take a look at the source for this post to get an
idea about how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Jekylling!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>J1 Team</name></author><category term="Example" /><category term="post" /><summary type="html">Welcome to Jekyll and J1 Template! You’ll find this post in posts directory under /post/starter/_posts. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/blog/featured" /></entry><entry><title type="html">Jekyll Collections</title><link href="/posts/featured/2017/08/01/feature-jekyll-collections/" rel="alternate" type="text/html" title="Jekyll Collections" /><published>2017-08-01T02:00:00+02:00</published><updated>2017-08-01T02:00:00+02:00</updated><id>/posts/featured/2017/08/01/feature-jekyll-collections</id><content type="html" xml:base="/posts/featured/2017/08/01/feature-jekyll-collections/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections are Jekyll&amp;#8217;s most powerful and simultaneously least understood
feature. Collections add another possibility, or use-case, outside of Jekyll&amp;#8217;s
post- and page-publishing functionality. Collections have the potential to
bring Jekyll&amp;#8217;s zen-like simplicity to all sorts of other types of content that
aren&amp;#8217;t ordered as with posts (ordered by date), but have a set &lt;strong&gt;relationship&lt;/strong&gt;
with one another - hence the name: &lt;em&gt;collection&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;excerpt__end&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://ben.balter.com/2015/02/20/jekyll-collections/&quot;&gt;Ben Balter: Jekyll Collections&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;readmore&quot;&gt;Traditional - Posts and pages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock mb-5&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/featured/img13.jpg&quot; alt=&quot;Jekyll Collections&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Most powerful but least understood feature&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most Jekyll sites are organized around two types of content, posts (ordered)
and pages (un-ordered).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jekyllrb.com/docs/posts/&quot;&gt;Posts&lt;/a&gt;&lt;/strong&gt; are organized reverse
chronologically. You might use them for blog posts on a personal blog,
or articles on a news site. You can recognize a post by its filename.
Posts live in the &lt;code&gt;&amp;#x5F;posts&lt;/code&gt; folder, and are always named in the form of
&lt;code&gt;YYYY-MM-DD-post-title.md&lt;/code&gt;. Because posts are dated, they&amp;#8217;re
traditionally not updated regularly once published.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jekyllrb.com/docs/pages/&quot;&gt;Pages&lt;/a&gt;&lt;/strong&gt; are documents that don&amp;#8217;t have
a relationship with one another. They can live anywhere within the
site&amp;#8217;s source directory and don&amp;#8217;t have a set naming pattern. If you have
a personal blog, you might have an &lt;code&gt;index.html&lt;/code&gt; page
(&lt;a href=&quot;https://ben.balter.com/&quot;&gt;the site&amp;#8217;s main page which is used to list
posts&lt;/a&gt;), or &lt;a href=&quot;https://ben.balter.com/about/&quot;&gt;an about me page&lt;/a&gt;, to name two
examples. Because pages aren&amp;#8217;t date specific, pages are often updated
over time to maintain accuracy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem is, not everything you might want to publish using a Jekyll
falls cleanly into the those two categories of content. As I noted in
&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/1941&quot;&gt;the original pitch&lt;/a&gt;, &quot;If
people are using blog posts for a non-blog post thing, Jekyll has
already failed&quot;. That&amp;#8217;s where Jekyll&amp;#8217;s
&lt;a href=&quot;http://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt; come in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;not-a-post-a-page-but-a-collection&quot;&gt;Not a post, a page - but a collection?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections add another possibility, or use-case, outside of Jekyll&amp;#8217;s
post- and page-publishing functionality. Collections have the potential to
bring Jekyll&amp;#8217;s zen-like simplicity to all sorts of other types of content that
aren&amp;#8217;t ordered as with posts (ordered by date), but have a set &lt;em&gt;relationship&lt;/em&gt;
with one another - hence the name: &lt;em&gt;collection&lt;/em&gt;. If you&amp;#8217;re familiar with
traditional CMS&amp;#8217;s, you can think of collections like
&lt;a href=&quot;http://codex.wordpress.org/Post_Types&quot;&gt;WordPress custom post types&lt;/a&gt; or
&lt;a href=&quot;https://www.drupal.org/node/774728&quot;&gt;Drupal custom content types&lt;/a&gt;, except
you do not need to program a specific class, learn any back-end
languages, and the syntax used to specify them is very easily readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What then, might you use collections for? Let&amp;#8217;s say you&amp;#8217;re making a
website for a bakery and want to list the different cupcakes varieties
you sell. You might use a collection called &lt;strong&gt;cupcakes&lt;/strong&gt;. You&amp;#8217;d create a
&lt;code&gt;&amp;#x5F;cupcakes&lt;/code&gt; folder, and would add &lt;code&gt;chocolate.md&lt;/code&gt; or &lt;code&gt;vanilla.md&lt;/code&gt; to it.
And just like posts or pages, your list of cupcakes would be accessible
as &lt;code&gt;site.cupcakes&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You wouldn&amp;#8217;t want to use posts here, because cupcakes aren&amp;#8217;t
chronological, and likely wouldn&amp;#8217;t want to just use a page here, because
it&amp;#8217;s a notably different animal than a document that lists your location
and hours. Each cupcake in the cupcakes collection is related to
one-another in the sense that they&amp;#8217;re all cupcakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections are a very new feature to Jekyll, and according to the
official documentation may be subject to change
&lt;a href=&quot;http://jekyllrb.com/docs/collections/&quot;&gt;Jekyll Documentation on
Collections&lt;/a&gt;; but you should not let that put you off of using them,
because Jekyll is open-source, which means you should trust the
community to work-together for the best common-case solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;collections-in-practice&quot;&gt;Collections in practice&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what if one day you decided to expand your offerings and sell
cookies in addition to cupcakes. Simply introduce a &quot;cookies&quot;
collection, adding &lt;code&gt;chocolate-chip.md&lt;/code&gt; and &lt;code&gt;peanut-butter.md&lt;/code&gt; to a
&lt;code&gt;&amp;#x5F;cookies&lt;/code&gt; directory, exposing the cookies as &lt;code&gt;site.cookies&lt;/code&gt;. You&amp;#8217;ll
notice the collections concept start to show its value here. Pages
wouldn&amp;#8217;t make sense here, because you&amp;#8217;d want to be able to list cupcakes
and cookies separately, and besides for both being baked goods, the one
cookie doesn&amp;#8217;t really share a relationship with a cupcake, at least not
in the same sense that cookies share with one another.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course you could at this stage, choose to have a more generic
collection &lt;code&gt;products&lt;/code&gt;, which you could develop liquid layouts for, so
that you and other developers could get the basic functionality needed
to display all products, with specific includes for &lt;code&gt;cupcakes&lt;/code&gt; and
&lt;code&gt;cookies&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Abstractly, because they&amp;#8217;re not outputted by default, you can think of
collections somewhat like &lt;a href=&quot;http://jekyllrb.com/docs/datafiles/&quot;&gt;Jekyll&amp;#8217;s
&lt;code&gt;&amp;#x5F;data&lt;/code&gt; folder support&lt;/a&gt;, but with the potential to generate content, and
be placed into their own specific part of your Jekyll site, so a lot
more robust. Like &lt;code&gt;&amp;#x5F;data&lt;/code&gt; files, they can support arbitrary key/values
through frontmatter, but they also support a full content body (like
posts and pages), and can be broken out into separate files. If I wanted
to break out my bakery&amp;#8217;s hours, I might have a &lt;code&gt;&amp;#x5F;data/hours.yml&lt;/code&gt; file
that looked something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;monday: 9-5
tuesday: 9-5
wednesday: 9-5
thursday: 9-5
friday: 9-3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That makes sense, because my bakery&amp;#8217;s hours is a relatively small
dataset. But trying to represent all my baked goods in that format (or
worse posts), would quickly get out of hand. That type of information is
better represented as individual markdown files with front matter, not
one giant YAML file that will quickly become unwieldy with complexity;
and rather than create the data, and pages to display the data, or the
data and a plugin to turn it into pages; using collections allows the
site owner to focus on the content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a more concrete example, take a look at
&lt;a href=&quot;https://github.com/github/choosealicense.com&quot;&gt;the source&lt;/a&gt; for
&lt;a href=&quot;http://choosealicense.com&quot;&gt;choosealicense.com&lt;/a&gt; a site which helps explain
open source licenses like the MIT or GPL license. There are pages like
&quot;about&quot; and &quot;terms of service&quot;, but the actual licenses live in
&lt;a href=&quot;https://github.com/github/choosealicense.com/tree/gh-pages/&amp;#x5F;licenses&quot;&gt;a
licenses collection&lt;/a&gt; and are displayed via
&lt;a href=&quot;https://github.com/github/choosealicense.com/blob/gh-pages/licenses.html&quot;&gt;a
licensed page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;other-use-cases&quot;&gt;Other use-cases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course this is not the only use-case, which is one of the benefits of
collections. You can turn on content generation to have the collection
contents automatically generated, or use the where syntax to get the
contents of specific collections to add common content, or devices to
your site.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using-collections&quot;&gt;Using collections&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The examples above were a slight simplification. There&amp;#8217;s one other step.
Before you can use a collection, you need to tell Jekyll about it. Going
back to our bakery example above, I might have a &lt;code&gt;&amp;#x5F;config.yml&lt;/code&gt; file that
looks something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;collections:
  - cupcakes
  - cookies&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tells Jekyll to look in the &lt;code&gt;&amp;#x5F;cupcakes&lt;/code&gt; and &lt;code&gt;&amp;#x5F;cookies&lt;/code&gt; folders
for documents, and to read them into the appropriate collection, including
&lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;YAML front matter&lt;/a&gt;, just as it
would posts (but again, without the date, because collection documents
aren&amp;#8217;t date specific).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, collections are read in (and exposed as &lt;code&gt;site.[collection]&lt;/code&gt;,
an alias per-collection), but not included in the final site; at least
not individually like you might expect posts or pages to. If you wanted
a page for each type of cupcake, you&amp;#8217;d have to modify the &lt;code&gt;&amp;#x5F;config.yml&lt;/code&gt;
a bit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;collections:
  cupcakes:
    output: true
    permalink: /cupcakes/:path/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, &lt;code&gt;&amp;#x5F;cupcakes/chocolate.md&lt;/code&gt; is outputted as
&lt;code&gt;cupcakes/chocolate/index.html&lt;/code&gt; when the site is built and would be
accessible as &lt;code&gt;example.com/cupcakes/chocolate/&lt;/code&gt;. The other advantage,
is, because the data is now structured and machine readable (rather than
in plain text), you could also use the &lt;code&gt;jsonify&lt;/code&gt; filter to output that
same information as an API for use elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;when-to-use-a-post-a-page-or-a-collection&quot;&gt;When to use a post, a page, or a collection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to think the decision looks roughly like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+         +----------------+&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;| Can the things be logically grouped?|---No---&amp;gt;|    Use pages   |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+         +----------------+&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;               Yes&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                V&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+         +----------------+&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;|      Are they grouped by date?      |---No---&amp;gt;|Use a collection|&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+         +----------------+&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;               Yes&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;                V&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;|            Use posts                |&lt;/span&gt;
&lt;span style=&quot;color: #888888&quot;&gt;+-------------------------------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So if you&amp;#8217;re not about to open a bakery (if you do, please send
cookies); what might you use collections for? In short, any discrete
group of &quot;things&quot; that can be logically grouped by a common theme
(that&amp;#8217;s not their date). Here&amp;#8217;s a few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Listing employees on your company&amp;#8217;s &quot;about&quot; page (or a project&amp;#8217;s
maintainers)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documenting methods in an open source project (or the project&amp;#8217;s that
use it, or the plugins available)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing jobs on your résumé (or talks given, papers written)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/blog/1939-how-github-uses-github-to-document-GitHub&quot;&gt;Articles
on a support site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recipes on your personal blog (or restaurant reviews, or dishes on a
menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Students in a class (or courses being offered, or listing the faculty)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cheats, tips, tricks and walkthroughs for games (by platform)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating re-usable content snippets for your site such as
testimonials, forms, sentences, buzz-words or call-outs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And honestly just about anything else&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections are a powerful (and often misunderstood) Jekyll feature, but
hopefully you&amp;#8217;ve now got an idea or two for your next Jekyll project. Of
course, if you&amp;#8217;re looking to dig in to collections, be sure to check out
&lt;a href=&quot;http://jekyllrb.com/docs/collections/&quot;&gt;the formal documentation&lt;/a&gt; for a
much more in-depth explanation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Jekylling!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>J1 Team</name></author><category term="Jekyll" /><category term="Collections" /><category term="Feature" /><category term="Relationship" /><summary type="html">Collections are Jekyll&amp;#8217;s most powerful and simultaneously least understood feature. Collections add another possibility, or use-case, outside of Jekyll&amp;#8217;s post- and page-publishing functionality. Collections have the potential to bring Jekyll&amp;#8217;s zen-like simplicity to all sorts of other types of content that aren&amp;#8217;t ordered as with posts (ordered by date), but have a set relationship with one another - hence the name: collection.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/blog/featured" /></entry><entry><title type="html">What is a static site?</title><link href="/posts/featured/2017/07/01/what-is-a-static-site/" rel="alternate" type="text/html" title="What is a static site?" /><published>2017-07-01T02:00:00+02:00</published><updated>2017-07-01T02:00:00+02:00</updated><id>/posts/featured/2017/07/01/what-is-a-static-site</id><content type="html" xml:base="/posts/featured/2017/07/01/what-is-a-static-site/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re not familiar with Jekyll (or other site generators), Jekyll is a
static site generator. Think of it like a content management system (CMS),
without all the complexity and headache. No need to build a giant
content-strangling Rube Goldberg machine to &lt;strong&gt;manage&lt;/strong&gt; content, if all you’re
doing at the end of the day is putting out HTML, Javascript, and CSS, the
building blocks of the internet. As a result, Jekyll gets out of your way
and allows you to concentrate on what truly matters: your content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;excerpt__end&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;readmore&quot;&gt;What is a static site?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock mb-5&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/featured/img3.jpg&quot; alt=&quot;What is a static site?&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. About Jekyll and static sites&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A static site serve the content straight to the user as it is stored on
the server side. To put it in another way, in opposition to WordPress
which use a database to load dynamic content, a static site will display
the same content to every user as it will directly load the HTML files
on the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-is-different&quot;&gt;What is different ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What are the differences between a static site and a dynamic website?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make it simple, a dynamic website uses a database and PHP/MySQL to
generate the content of a page when a user will request it. For example,
building a website using WordPress CMS will result in having a dynamic
website.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-use-a-static-site&quot;&gt;Why use a static site?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wat are the advantages of a static website over a dynamic site?
You may be wondering “Why should I build a static site when I could do a
WordPress?”. Well, having a database implies a lot of downsides. Here
comes the tree main advantages of using a static site over a dynamic
one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Static: the better performance and a crazy fast load time!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One the of the main advantages of using a static site is the fact that
it is crazy fast to load. Indeed, when the user request a page, there is
no need to request a database and various files in order to generate the
page itself as all the content is already placed in a one and only file:
an HTML one. That’s why, by using a static site you will get a boost in
your loading time that will provide great user experience for the
internauts. Moreover, we know that more and more people are surfing the
web using their smartphones with, sometimes, poor internet connections,
that’s why having fast loading times will participate in making your
website mobile friendly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-aspects&quot;&gt;Security aspects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having a static website: say goodbye to hacking and security issues!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tired of getting WordPress notifications about security issues and
updates every week? No worries, as a static site has no database, there
are close to no hack possible compared to a WordPress website. Indeed,
your site will have way less footprints and security issues since it
will only load plain HTML and CSS files. The security gain in having a
static website is one the main reason why many famous brands switch to
static site instead of having their website on Drupal or WordPress.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-and-hosting&quot;&gt;Building and Hosting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building a static site and hosting: you will save you money!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using a static site, you will only have most of the time only HTML and
CSS files to host. This kind of files are super light which also means
that you will not need a powerhouse hosting to have a static site up and
running. Moreover, if your traffic suddenly increase, your site will not
go down contrary to a dynamic site which should request the database
each time for each user.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-use-a-site-generator&quot;&gt;Why use a site generator?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with HTML files can sometimes be quite annoying. Indeed, if you
need to make a modification you must manually change every file. If you
have a website with 10 pages, it can be ok but imagine if you have a
corporate site with 100+ pages or a blog with thousands of pages?! Using
a static site generator will solve this issue as it separates the
content and the template. To say it another way, by using a static site
generator you will only need to make the modification once and the
generator will apply it to all your pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-jekyll&quot;&gt;Why Jekyll?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the popularity of static sites is growing, there are plenty of static
site generators available on the market. The more famous are Jekyll,
Middleman and Hugo. Each one has its own specificities and may suits you
better depending on the programming languages you already are familiar
with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which static site generator should I use?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I wanted to switch from WordPress to Static I personally
choose Jekyll as for me it is the best static site generator so far.
This blog is powered under Jekyll.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>J1 Team</name></author><category term="Jekyll" /><category term="Static" /><category term="Web" /><category term="Site" /><category term="Security" /><category term="Hosting" /><summary type="html">If you’re not familiar with Jekyll (or other site generators), Jekyll is a static site generator. Think of it like a content management system (CMS), without all the complexity and headache. No need to build a giant content-strangling Rube Goldberg machine to manage content, if all you’re doing at the end of the day is putting out HTML, Javascript, and CSS, the building blocks of the internet. As a result, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/blog/featured" /></entry><entry><title type="html">Static Site Generators</title><link href="/posts/featured/2017/06/01/top-open-source-static-site-generators/" rel="alternate" type="text/html" title="Static Site Generators" /><published>2017-06-01T02:00:00+02:00</published><updated>2017-06-01T02:00:00+02:00</updated><id>/posts/featured/2017/06/01/top-open-source-static-site-generators</id><content type="html" xml:base="/posts/featured/2017/06/01/top-open-source-static-site-generators/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;People sometimes ask if static sites make sense for anything beyond a one-pager.
This leaderboard highlights the top open source projects, in many different
languages, that make static sites not only viable, but an attractive option
for creating sophisticated websites!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The typical CMS driven website works by building each page on-demand, fetching
content from a database and running it through a template engine. This means
each page is assembled from templates and content on each request to the
server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For most sites this is completely unnecessary overhead and only adds
complexity, performance problems and security issues. After all, by far
the most websites only change when the content authors or their design
team makes changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;excerpt__end&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;readmore&quot;&gt;Static Site Generators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock mb-5&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/blog/featured/img5.jpg&quot; alt=&quot;Static Site Generators&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Top Open-Source Static Site Generators&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Static Site Generator takes a different approach and generate all the pages
of the website once when there’s actually changes to the site. This means
there’s no moving parts in the deployed website. Caching gets much easier,
performance goes up and static sites are far more secure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find out what Open-Source Static Site Generators are available today and
their ranking in terms of popularity you should check &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On StaticGen, you&amp;#8217;ll will find the most complete list of generators!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>J1 Team</name></author><category term="Open Source" /><category term="Static" /><category term="Site Generators" /><summary type="html">People sometimes ask if static sites make sense for anything beyond a one-pager. This leaderboard highlights the top open source projects, in many different languages, that make static sites not only viable, but an attractive option for creating sophisticated websites! The typical CMS driven website works by building each page on-demand, fetching content from a database and running it through a template engine. This means each page is assembled from templates and content on each request to the server. For most sites this is completely unnecessary overhead and only adds complexity, performance problems and security issues. After all, by far the most websites only change when the content authors or their design team makes changes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/blog/featured" /></entry><entry><title type="html">Jekyll URL Configuration</title><link href="/posts/featured/2017/05/01/confusion-about-base-url/" rel="alternate" type="text/html" title="Jekyll URL Configuration" /><published>2017-05-01T02:00:00+02:00</published><updated>2017-05-01T02:00:00+02:00</updated><id>/posts/featured/2017/05/01/confusion-about-base-url</id><content type="html" xml:base="/posts/featured/2017/05/01/confusion-about-base-url/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hey, so there’s been a bit of confusion about what the Jekyll configuration
option called baseurl is. Part of the beauty of open-source and of Jekyll is
that there’s a lot of flexibility. Unfortunately, much of this flexibility
doesn’t apply to &lt;code&gt;baseurl&lt;/code&gt;. Here’s a quick distillation of its intentions,
and how to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See: &lt;a href=&quot;https://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/&quot; class=&quot;bare&quot;&gt;https://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;excerpt__end&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;readmore&quot;&gt;Mimic GitHub Pages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The config parameter &lt;code&gt;baseurl&lt;/code&gt; was originally added back in 2010 to allow
“the user to test the website with the internal webserver under the same
base url it will be deployed to on a production server”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock mb-3&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/what-is-a-baseurl.jpg&quot; alt=&quot;what-is-a-baseurl&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let’s say I come up with a cool new project. I want to make documentation
for a project I’m working on called “example”, and I’ll be deploying it to
GitHub Pages as a repo under the “@jekyll” username. Its documentation will
be available at the URL &lt;a href=&quot;http://jekyll.github.io/example&quot; class=&quot;bare&quot;&gt;http://jekyll.github.io/example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, the term “base URL” refers to /example, which I place in
my _config.yml as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;  baseurl: /example&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I go to develop my website, I run jekyll serve like normal, but this
time I go to &lt;a href=&quot;http://localhost:4000/example/&quot; class=&quot;bare&quot;&gt;http://localhost:4000/example/&lt;/a&gt;. What this baseurl has done is
specified a base path relative to the domain at which the site lives. If you
navigate to just &lt;a href=&quot;http://localhost:4000/&quot; class=&quot;bare&quot;&gt;http://localhost:4000/&lt;/a&gt;, you will see an error message. If
you have hooked up all your links correctly, then you will never see a URL
in your testing without /example at the beginning of the path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might see, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;smarty&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&quot;color: #BC7A00&quot;&gt;{{&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;page&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;path&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;prepend&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;site&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;baseurl&lt;/span&gt; &lt;span style=&quot;color: #BC7A00&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-your-site-properly&quot;&gt;Configuring Your Site Properly&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Set baseurl in your _config.yml to match the production URL without
the host (e.g. /example, not &lt;a href=&quot;http://jekyll.github.io/example&quot; class=&quot;bare&quot;&gt;http://jekyll.github.io/example&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run jekyll serve and go to &lt;code&gt;&lt;a href=&quot;http://localhost:4000/your_baseurl/&quot; class=&quot;bare&quot;&gt;http://localhost:4000/your_baseurl/&lt;/a&gt;&lt;/code&gt;, replacing
&lt;code&gt;your_baseurl&lt;/code&gt; with whatever you set baseurl to in your _config.yml - and not
forgetting the trailing slash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure everything works. Feel free to prepend your urls with site.baseurl.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push up to your host and see that everything works there, too!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;now-what-the-heck-is-site-url&quot;&gt;Now what the heck is site.url?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;site.url is used in conjunction with site.baseurl when you want a link to
something with the full URL to it. One common paradigm&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>J1 Team</name></author><category term="Jekyll" /><category term="Configuration" /><category term="base_url" /><summary type="html">Hey, so there’s been a bit of confusion about what the Jekyll configuration option called baseurl is. Part of the beauty of open-source and of Jekyll is that there’s a lot of flexibility. Unfortunately, much of this flexibility doesn’t apply to baseurl. Here’s a quick distillation of its intentions, and how to use it. See: https://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/images/posts" /></entry><entry><title type="html">Columbia River</title><link href="/posts/wikipedia/2016/11/26/columbia-river/" rel="alternate" type="text/html" title="Columbia River" /><published>2016-11-26T00:00:00+01:00</published><updated>2016-11-26T00:00:00+01:00</updated><id>/posts/wikipedia/2016/11/26/columbia-river</id><content type="html" xml:base="/posts/wikipedia/2016/11/26/columbia-river/">&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Columbia River&lt;/em&gt; is the largest river in the Pacific Northwest region of
North America.
The river in the Rocky Mountains of British Columbia, Canada. It flows northwest
and then south into the US state of Washington, then turns west to form most of
the border between Washington and the state of Oregon before emptying into
the Pacific Ocean. The river is 1,243 miles (2,000 km) long, and its largest
tributary is the Snake River. Its drainage basin is roughly the size of
France and extends into seven US states and a Canadian province.&lt;/p&gt;

&lt;p&gt;excerpt__end&lt;/p&gt;

&lt;p&gt;By volume, the Columbia is the fourth-largest river in the United States; it
has the greatest flow of any North American river draining into the Pacific.
The river’s heavy flow and relatively steep [gradient] gives it tremendous
potential for the generation of electricity. The [14 hydroelectric dams] on
the Columbia’s main stem and many more on its tributaries produce more than
44% of total U.S. hydroelectric generation – much more hydroelectric power
than those of any other North American river.&lt;/p&gt;

&lt;p&gt;The Columbia and its tributaries have been central to the region’s culture and
economy for thousands of years. They have been used for transportation since
ancient times, linking the many cultural groups of the region. The river system
hosts many species of fish, which migrate between habitats and the saline
waters of the Pacific Ocean. These fish—especially the salmon species—provided
the core subsistence for native peoples; in past centuries, Indigenous peoples
traveled across western North America to the Columbia to trade for fish.&lt;/p&gt;

&lt;p&gt;In the late 18th century, a private American ship became the first non-indigenous
vessel to enter the river; it was followed by a British explorer, who navigated
past the Oregon Coast Range into the Willamette Valley. In the following
decades, fur trading companies used the Columbia as a key transportation route.
Overland explorers entered the Willamette Valley through the scenic but
treacherous Columbia River Gorge, and pioneers began to settle the valley in
increasing numbers, following both routes to enter it. Steamships along the
river linked communities and facilitated trade; the arrival of railroads in
the late 19th century, many running along the river, supplemented these links.&lt;/p&gt;</content><author><name>Wikipedia</name></author><category term="USA" /><category term="Geography" /><category term="Northwest Region" /><category term="Rocky Mountains" /><category term="Rivers" /><category term="Wikipedia" /><summary type="html">From Wikipedia, the free encyclopedia The Columbia River is the largest river in the Pacific Northwest region of North America. The river in the Rocky Mountains of British Columbia, Canada. It flows northwest and then south into the US state of Washington, then turns west to form most of the border between Washington and the state of Oregon before emptying into the Pacific Ocean. The river is 1,243 miles (2,000 km) long, and its largest tributary is the Snake River. Its drainage basin is roughly the size of France and extends into seven US states and a Canadian province.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22name%22=%3Enil%7D" /></entry><entry><title type="html">Télé 7 Jours</title><link href="/posts/wikipedia/2016/11/25/tele7jours/" rel="alternate" type="text/html" title="Télé 7 Jours" /><published>2016-11-25T00:00:00+01:00</published><updated>2016-11-25T00:00:00+01:00</updated><id>/posts/wikipedia/2016/11/25/tele7jours</id><content type="html" xml:base="/posts/wikipedia/2016/11/25/tele7jours/">&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Télé 7 Jours&lt;/em&gt; is a French weekly magazine published by Hachette Filipacchi
Médias in France. It publishes news and materials relating to French radio and
television programming.&lt;/p&gt;

&lt;p&gt;excerpt__end&lt;/p&gt;

&lt;h2 id=&quot;history-and-profile&quot;&gt;History and profile&lt;/h2&gt;

&lt;p&gt;Originally, the magazine was named &lt;em&gt;Radio 44&lt;/em&gt; as it started publishing on
29 October 1944. The name would change (&lt;em&gt;Radio 45&lt;/em&gt;, &lt;em&gt;Radio 46&lt;/em&gt;, etc.) as the
year of publication changed, until the year 1957, when it was renamed
&lt;em&gt;Radio Télévision 57&lt;/em&gt; and in 1959 was changed to &lt;em&gt;Télé 59&lt;/em&gt;. Its contents are
basically coverage of television news and listings, cultural and lifestyle
news and entertainment.&lt;/p&gt;

&lt;p&gt;In 1960, Sofirad, the original owner, sold the magazine to Jean Prouvost
who named it &lt;em&gt;7 jours Télé 60&lt;/em&gt; for a short period and then renamed it to the
present &lt;em&gt;Télé 7 Jours&lt;/em&gt; from 7 March 1960.&lt;/p&gt;

&lt;p&gt;The magazine is published on a weekly basis. Its circulation jumped to more
than a million copies weekly in 1962 and 2 million by 1965 becoming the biggest
circulation weekly in France.&lt;/p&gt;

&lt;p&gt;In 1976, Hachette Filipacchi Médias purchased the magazine. The magazine remained
the most read French magazine in the 1980s and 1990s reaching a circulation of
3.2 million weekly.&lt;/p&gt;

&lt;p&gt;From 1985 to 2003, &lt;em&gt;Télé 7 Jours&lt;/em&gt; organized a French television production award
(similar in nature to the Emmy Awards) called the &lt;em&gt;7 d’Or&lt;/em&gt;. From 1996 to 1999,
Benjamin Cuq worked as reporter for &lt;em&gt;Télé 7 Jours&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;circulation&quot;&gt;Circulation&lt;/h2&gt;

&lt;p&gt;Télé 7 Jours had a circulation of 2,800,000 copies in 1974. The circulation
of the weekly was 2,606,000 copies in 1999.&lt;/p&gt;

&lt;p&gt;It was the sixth best-selling television magazine worldwide with a circulation
of 2,371,000 copies during in 2001. In 2005 its circulation dropped to
1,892,000 copies, but it was the best-selling magazine in France.&lt;/p&gt;

&lt;p&gt;The circulation of the magazine was 1,588,000 copies during the 2007-2008
period. In 2010 the magazine had a circulation of 1,471,593 copies. Its
circulation was 1,225,642 copies in 2014.&lt;/p&gt;</content><author><name>Wikipedia</name></author><category term="France" /><category term="Radio" /><category term="TV" /><category term="Television" /><category term="Magazine" /><category term="Wikipedia" /><summary type="html">From Wikipedia, the free encyclopedia Télé 7 Jours is a French weekly magazine published by Hachette Filipacchi Médias in France. It publishes news and materials relating to French radio and television programming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22name%22=%3Enil%7D" /></entry><entry><title type="html">Narcisse Snake Pits</title><link href="/posts/wikipedia/2016/11/24/narcisse-snake-pits/" rel="alternate" type="text/html" title="Narcisse Snake Pits" /><published>2016-11-24T00:00:00+01:00</published><updated>2016-11-24T00:00:00+01:00</updated><id>/posts/wikipedia/2016/11/24/narcisse-snake-pits</id><content type="html" xml:base="/posts/wikipedia/2016/11/24/narcisse-snake-pits/">&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Narcisse Snake Pits are located in the Rural Municipality of Armstrong
about 6 kilometres (3.7 mi) north of Narcisse, Manitoba, Canada. The dens
are the winter home of tens of thousands of red-sided garter snakes
(Thamnophis sirtalis parietalis). These pits are the largest concentration
in the world of this particular type of snake. Their winter dens are
subterranean caverns formed by the area’s water-worn limestone bedrock.
In the spring, they come up from their dens to the snake pits, where they
engage in mating rituals. Then they disperse into the nearby marshes for
the summer.&lt;/p&gt;

&lt;p&gt;excerpt__end&lt;/p&gt;

&lt;h2 id=&quot;conservation&quot;&gt;Conservation&lt;/h2&gt;

&lt;p&gt;The population of red-sided garter snakes around Narcisse was roughly 70,000
until terrible weather in 1999 killed tens of thousands of them before they
could reach their winter dens. [1] This tragedy triggered concern about the
snakes’ biannual migratory path, which cuts right across Highway 17. Every
year, ten thousand snakes trying to get to or from their winter dens had
been crushed under the wheels of vehicles. This had not been a problem before,
because the vast population compensated for the losses. After the winter of
1999, however, the population of garter snakes was dangerously low, causing
Manitoba Hydro and volunteers to intervene.&lt;/p&gt;

&lt;p&gt;Foot-high snow fences were built to force snakes into six-inch (15-cm)
tunnels that went under Highway 17. Since some snakes still managed to
squeeze under the fence and onto the road, signs were put up during the
migratory season urging motorists to slow down to avoid accidentally driving
over snakes. These measures worked, and now less than a thousand snakes per
season are killed on the highway.&lt;/p&gt;

&lt;h2 id=&quot;visiting&quot;&gt;Visiting&lt;/h2&gt;

&lt;p&gt;The conservation area is open to the public. The snakes are most active
during the spring and fall - in late April to early May, which is the mating
season, and also in early September, when the snakes slither back down to
their winter dens.&lt;/p&gt;</content><author><name>Wikipedia</name></author><category term="Canada" /><category term="Geography" /><category term="Narcisse" /><category term="Manitoba" /><category term="Cities" /><category term="Snakes" /><category term="Largest population" /><category term="Wikipedia" /><summary type="html">From Wikipedia, the free encyclopedia The Narcisse Snake Pits are located in the Rural Municipality of Armstrong about 6 kilometres (3.7 mi) north of Narcisse, Manitoba, Canada. The dens are the winter home of tens of thousands of red-sided garter snakes (Thamnophis sirtalis parietalis). These pits are the largest concentration in the world of this particular type of snake. Their winter dens are subterranean caverns formed by the area’s water-worn limestone bedrock. In the spring, they come up from their dens to the snake pits, where they engage in mating rituals. Then they disperse into the nearby marshes for the summer.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22name%22=%3Enil%7D" /></entry><entry><title type="html">Luft-Fahrzeug-Gesellschaft</title><link href="/posts/wikipedia/2016/11/23/luft-fahrzeug-gesellschaft/" rel="alternate" type="text/html" title="Luft-Fahrzeug-Gesellschaft" /><published>2016-11-23T00:00:00+01:00</published><updated>2016-11-23T00:00:00+01:00</updated><id>/posts/wikipedia/2016/11/23/luft-fahrzeug-gesellschaft</id><content type="html" xml:base="/posts/wikipedia/2016/11/23/luft-fahrzeug-gesellschaft/">&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luft-Fahrzeug-Gesellschaft, also referred to as LFG, was a German aircraft
manufacturer during World War I. They are best known for their various “Roland”
designs, notably the Roland C.II Walfisch (whale), Roland D.II haifisch (Shark)
and Roland D.VI, although they also produced a number of airships and many
experimental designs.&lt;/p&gt;

&lt;p&gt;excerpt__end&lt;/p&gt;

&lt;h2 id=&quot;airships&quot;&gt;Airships&lt;/h2&gt;

&lt;p&gt;Luft-Fahrzeug-Gesellschaft formed on April 30, 1908, from the assets of an
experimental airship engine company located in Bitterfeld, Motorluftschiff
Studiengesellscaft (MStG). Additional funding for the new enterprise was
provided primarily by Krupp, AEG, and a local chemical company. The company’s
offices were located in Berlin along with the factory at Adlershof. Manufacture
was transferred to Charlottenburg following a fire on 6 September 1916,
allegedly caused by the British Secret Service.&lt;/p&gt;

&lt;p&gt;Their first project was an airship design by August von Parseval, a German
airship designer. This entered service as the PL.II in 1910. During World War I,
four were delivered to the German Army and Navy. In total some 25 “PL” airships
were built, flown and delivered to various customers. The PL-26, one of the
last, crashed on landing and burnt inside hangar Luftschiffhalle 2 with no
fatalities. For the rest of the war the hangars were used mostly for repairs
of observation balloons.&lt;/p&gt;

&lt;h2 id=&quot;aeroplanes&quot;&gt;Aeroplanes&lt;/h2&gt;

&lt;p&gt;In 1913 LFG started producing new designs under the trade name Roland to avoid
confusion with the Luftverkehrsgesellschaft (L.V.G.) firm. In 1916 the company
developed a floatplane version of the Albatros C.Ia as the LFG W. Some parts
were built in Bitterfeld, but final assembly and checkout was carried out
in new factories in Stralsund.&lt;/p&gt;

&lt;p&gt;Their first successful design was the Roland C.II Walfisch (whale), a two-seat
reconnaissance biplane. It had a semi-monocoque fuselage, skinned with two
layers of long plywood strips glued at opposing diagonal angles around a mold
and skinned with fabric both inside and outside. The fuselage filled the full
gap between the wings, leaving the pilot and observer/gunner over the top
wings with an excellent view upward. The fuselage “half-shells” were each
fitted onto a supporting framework of wooden formers and longerons. The
“wrapping” technique of the long plywood strips for the outer fuselage surface
led to this particular technique of manufacture being described in German as
the Wickelrumpf (wrapped body) style of construction, and was subsequently
patented by the firm,[2] licensing the construction method to Pfalz in 1917
for construction of their own single-seat fighter designs. Although it was
said to have tricky handling, the Roland C.II had excellent performance, and
was also used on long-range missions as a bomber escort. A version with the
200 hp Benz Bz.IV engine and new wing struts was built as the D.III, but only
one prototype was ever built, as was the case for the 160 hp Mercedes
D.III-powered C.V.&lt;/p&gt;

&lt;p&gt;The C.II was adapted to the pure fighter role as the Roland D.I, but in this
role the poor forward view proved to be a problem. A fire at the factory
severely constrained production, and only 20 were built. A newer version with
a more conventional layout, the Roland D.II, followed, whose fuselage was
reduced in height to leave a gap with the upper wing but was otherwise similar
overall. The competing Albatros D.I was preferred, and only about 230 examples
were built, which where then mostly used on the eastern front and in Macedonia.&lt;/p&gt;

&lt;p&gt;The fuselage to wing gap was further increased in the D.III, but the
temperamental 180 hp Argus As.III limited production to only a handful.
Six D.IIs were delivered in July 1917 to the Bulgarian Air Force, and six
D.IIIs were delivered in May 1918.&lt;/p&gt;

&lt;p&gt;Although the Wickelrumpf style of wood-structure monocoque fuselage was
extremely strong, it was also very difficult and time-consuming to build.
A new method of construction was introduced that used spruce planking running
the length of the aircraft in place of the formed plywood, and the D.III was
adapted using this technique to produce D.IV triplane and D.V biplane, both
powered by the D.III’s 160 hp Mercedes. The fuselage shell’s construction
technique for these aircraft resembled a clinker-planked boat hull in
appearance when finished, and was named Klinkerrumpf (clinker body)
construction, and was also patented by the firm.[4] A further adaptation
of the D.IV with the 185 hp Benz Bz. III resulted in the Roland D.VI, which
was entered in the First Fighter Competition trials at Adlershof in early 1918.
 Although the Fokker D.VII won that contest, the D.VI was also ordered into
 production as it used a different engine, and by the end of the war about
 350 had been delivered. A large number of different versions using various
 engines were built as prototypes without entering production, as well as a
 triplane adaptation as the D.VI (also known as the Dr.I).&lt;/p&gt;

&lt;p&gt;The next major design from Roland were parasol monoplane designs, the D.XVI
with the Siemens-Halske Sh.III or 170 hp Goebel Goe.IIIa rotary piston engines,
and the otherwise similar D.XVII with the inline 185 hp BMW IIIa. Both were
entered into the Second Fighter Competition at Adlershof, but lost to the
Fokker D.VIII.&lt;/p&gt;

&lt;p&gt;After the war all aircraft production in Germany was banned, and the company
was forced to close the Bitterfeld plant and reopen in Seddin, producing
airplanes, balloons and life boats. In 1933, aircraft production shut down.
Three additional Parseval pattern airships were also built during this period.&lt;/p&gt;</content><author><name>Wikipedia</name></author><category term="Aircraft" /><category term="Company" /><category term="Engine" /><category term="Wikipedia" /><summary type="html">From Wikipedia, the free encyclopedia Luft-Fahrzeug-Gesellschaft, also referred to as LFG, was a German aircraft manufacturer during World War I. They are best known for their various “Roland” designs, notably the Roland C.II Walfisch (whale), Roland D.II haifisch (Shark) and Roland D.VI, although they also produced a number of airships and many experimental designs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22name%22=%3Enil%7D" /></entry><entry><title type="html">The Rotary Engine</title><link href="/posts/wikipedia/2016/11/22/rotary-engine/" rel="alternate" type="text/html" title="The Rotary Engine" /><published>2016-11-22T00:00:00+01:00</published><updated>2016-11-22T00:00:00+01:00</updated><id>/posts/wikipedia/2016/11/22/rotary-engine</id><content type="html" xml:base="/posts/wikipedia/2016/11/22/rotary-engine/">&lt;p&gt;&lt;em&gt;From Wikipedia, the free encyclopedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The rotary engine was an early type of internal-combustion engine, usually
designed with an odd number of cylinders per row in a radial configuration, in
which the crankshaft remained stationary in operation, with the entire crankcase
and its attached cylinders rotating around it as a unit. Its main application
was in aviation, although it also saw use before its primary aviation role,
in a few early motorcycles and automobiles.&lt;/p&gt;

&lt;p&gt;This type of engine was widely used as an alternative to conventional inline
engines (straight or V) during World War I and the years immediately preceding
that conflict. It has been described as “a very efficient solution to the
problems of power output, weight, and reliability”.&lt;/p&gt;

&lt;p&gt;By the early 1920s, however, the inherent limitations of this type of engine
had rendered it obsolete, with the power output increasingly going into
overcoming the air-resistance of the spinning engine itself. The rotating
mass of the engine also caused significant gyroscopic precession: depending
on the type of aircraft, this produced stability and control problems,
especially for inexperienced pilots. Another factor in the demise of the
rotary was the fundamentally inefficient total-loss oiling system, caused by
the need to aspirate the fuel/air mixture through the hollow crankshaft and
crankcase along with the lubricating medium, as in a two-stroke engine.&lt;/p&gt;

&lt;p&gt;excerpt__end&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;A rotary engine is essentially a standard Otto cycle engine, but instead of
having a fixed cylinder block with rotating crankshaft as with a conventional
radial engine, the crankshaft remains stationary and the entire cylinder block
rotates around it. In the most common form, the crankshaft was fixed solidly
to the airframe, and the propeller was simply bolted to the front of the
crankcase.&lt;/p&gt;

&lt;p&gt;Three key factors contributed to the rotary engine’s success at the time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Smooth running: Rotaries delivered power very smoothly because (relative
to the engine mounting point) there are no reciprocating parts, and the
relatively large rotating mass of the crankcase/cylinders (as a unit)
acted as a flywheel.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved cooling: when the engine was running the rotating crankcase/cylinder
assembly created its own fast-moving cooling airflow, even with the aircraft
at rest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Weight advantage: many conventional engines had to have heavy flywheels
added to smooth out power impulses and reduce vibration. Rotary engines
gained a substantial power-to-weight ratio advantage by having no need for
an added flywheel. They shared with other radial configuration engines the
advantage of a small, flat crankcase, and because of their efficient
air-cooling system cylinders could be made with thinner walls and shallower
cooling fins, which further reduced their weight.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most rotary engines were arranged with the cylinders pointing outwards from a
single crankshaft, in the same general form as a radial, but there were also
rotary boxer engines and even one-cylinder rotaries.&lt;/p&gt;

&lt;p&gt;Like radial engines, rotaries were generally built with an odd number of
cylinders (usually either 7 or 9), so that a consistent every-other-piston
firing order could be maintained, to provide smooth running. Rotary engines
with an even number of cylinders were mostly of the “two row” type.&lt;/p&gt;</content><author><name>Wikipedia</name></author><category term="Engine" /><category term="Otto cycle engine" /><category term="Wikipedia" /><summary type="html">From Wikipedia, the free encyclopedia The rotary engine was an early type of internal-combustion engine, usually designed with an odd number of cylinders per row in a radial configuration, in which the crankshaft remained stationary in operation, with the entire crankcase and its attached cylinders rotating around it as a unit. Its main application was in aviation, although it also saw use before its primary aviation role, in a few early motorcycles and automobiles. This type of engine was widely used as an alternative to conventional inline engines (straight or V) during World War I and the years immediately preceding that conflict. It has been described as “a very efficient solution to the problems of power output, weight, and reliability”. By the early 1920s, however, the inherent limitations of this type of engine had rendered it obsolete, with the power output increasingly going into overcoming the air-resistance of the spinning engine itself. The rotating mass of the engine also caused significant gyroscopic precession: depending on the type of aircraft, this produced stability and control problems, especially for inexperienced pilots. Another factor in the demise of the rotary was the fundamentally inefficient total-loss oiling system, caused by the need to aspirate the fuel/air mixture through the hollow crankshaft and crankcase along with the lubricating medium, as in a two-stroke engine.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/%7B%22name%22=%3Enil%7D" /></entry></feed>